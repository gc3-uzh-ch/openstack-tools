#!/usr/bin/env python
# -*- coding: utf-8 -*-#
#
#
# Copyright (C) 2015, 2016, S3IT, University of Zurich. All rights reserved.
#
#
# This program is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the
# Free Software Foundation; either version 2 of the License, or (at your
# option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
"""Tool to increase the quota of a project and keep track of the
changes using a property in the project itself.
"""
__docformat__ = 'reStructuredText'
__author__ = 'Antonio Messina <antonio.s.messina@gmail.com>'

import argparse
import datetime
import logging
import os
import prettytable
import sys

from keystoneclient.auth.identity import v3
from keystoneclient import session
from keystoneclient.v3 import client as keystone_client
try:
    # old package name
    import keystoneclient.openstack.common.apiclient.exceptions as kex
except ImportError:
    import keystoneclient.exceptions as kex

from novaclient import client as nova_client
from cinderclient import client as cinder_client
import cinderclient.exceptions as cex
from neutronclient.v2_0 import client as neutron_client

import swiftclient

log = logging.getLogger()
log.addHandler(logging.StreamHandler())

STD_DATE_FMT = "%Y-%m-%d"

def memoize(f):
    memo = {}
    def helper(x):
        if f not in memo:
            memo[f] = f(x)
        return memo[f]
    return helper


@memoize
def make_session(opts):
    """Create a Keystone session"""
    auth = v3.Password(auth_url=opts.os_auth_url,
                       username=opts.os_username,
                       password=opts.os_password,
                       project_name=opts.os_project_name,
                       user_domain_id=opts.os_user_domain_id,
                       project_domain_id=opts.os_project_domain_id)
    sess = session.Session(auth=auth)
    return sess


class EnvDefault(argparse.Action):
    # This is took from
    # http://stackoverflow.com/questions/10551117/setting-options-from-environment-variables-when-using-argparse
    def __init__(self, envvar, required=True, default=None, **kwargs):
        if envvar in os.environ:
            default = os.environ[envvar]
        if required and default:
            required = False
        super(EnvDefault, self).__init__(default=default, required=required,
                                         **kwargs)

    def __call__(self, parser, namespace, values, option_string=None):
        setattr(namespace, self.dest, values)


def mktime(datestring):
    return datetime.datetime.strptime(datestring, STD_DATE_FMT).strftime(STD_DATE_FMT)

def check_signed_int(value):
    op = str(value)[0]
    if op in ('+', '-'):
        func = lambda x, y: x+y
    elif op == '=':
        value = value[1:]
        func = lambda x, y: y
    else:
        func = lambda x, y: y

    try:
        ivalue = int(value)
    except:
        raise argparse.ArgumentTypeError("invalid int value '%s'" % value)

    return func, ivalue


def setup(argv=sys.argv[1:]):
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument('--os-username',
                        action=EnvDefault,
                        envvar="OS_USERNAME",
                        help='OpenStack administrator username. If not supplied, the value of the '
                        '"OS_USERNAME" environment variable is used.')
    parser.add_argument('--os-password',
                        action=EnvDefault,
                        envvar="OS_PASSWORD",
                        help='OpenStack administrator password. If not supplied, the value of the '
                        '"OS_PASSWORD" environment variable is used.')
    parser.add_argument('--os-project-name',
                        action=EnvDefault,
                        envvar="OS_PROJECT_NAME",
                        help='OpenStack administrator project name. If not supplied, the value of the '
                        '"OS_PROJECT_NAME" environment variable is used.')
    parser.add_argument('--os-auth-url',
                        action=EnvDefault,
                        envvar="OS_AUTH_URL",
                        help='OpenStack auth url endpoint. If not supplied, the value of the '
                        '"OS_AUTH_URL" environment variable is used.')
    parser.add_argument('--os-user-domain-id',
                        default='default')
    parser.add_argument('--os-project-domain-id',
                        default='default')

    parser.add_argument('-v', '--verbose', action='count', default=0,
                        help='Increase verbosity')
    parser.add_argument('-n', '--dry-run', action='store_true',
                        help='Do not actually change anything, only show what would be changed')
    parser.add_argument('--date',
                        type=mktime,
                        default=datetime.date.today().strftime(STD_DATE_FMT),
                        help="Date (YYYY-MM-DD) to be used as reference. Default: today's date (%(default)s)")

    parser.add_argument('--property',
                        default='quota_history',
                        help='Project property to use to keep track of the changes.')

    parser.add_argument('--msg',
                        help='Add a message to the log entry')

    parser.add_argument('--v-gigabytes',
                        type=check_signed_int,
                        help="Update CINDER quota in GB")
    parser.add_argument('--v-volumes',
                        type=check_signed_int)
    parser.add_argument('--v-volume-type')
    parser.add_argument('--c-cores',
                        type=check_signed_int)
    parser.add_argument('--c-ram',
                        type=check_signed_int,
                        help="New total amount of RAM in MB")
    parser.add_argument('--c-instances',
                        type=check_signed_int)
    parser.add_argument('--n-network',
                        type=check_signed_int)
    parser.add_argument('--n-subnet',
                        type=check_signed_int)
    parser.add_argument('--n-secgroup',
                        type=check_signed_int)
    parser.add_argument('--n-floatingip',
                        type=check_signed_int)
    parser.add_argument('--n-port',
                        type=check_signed_int)
    parser.add_argument('--n-router',
                        type=check_signed_int)

    parser.add_argument('--s-gigabytes',
                        type=check_signed_int,
                        help='Total amount of gigabibytes for SWIFT')

    parser.add_argument('project',
                        help="Project to update")

    opts = parser.parse_args(argv)

    # Set verbosity
    verbosity = max(0, 3-opts.verbose) * 10
    log.setLevel(verbosity)
    return opts


def _update_quota(projectid, opts, names, client, servicename):
    changelog = []
    old_quota = client.quotas.get(projectid)
    quota_update = {}

    for name, option in names.items():
        if not getattr(opts, option): continue
        opt, value = getattr(opts, option)

        oldvalue = getattr(old_quota, name)
        newvalue = opt(oldvalue, value)
        delta = newvalue-oldvalue
        if delta == 0:
            log.info("Not updating `%s` quota for service %s. %s == %s",
                     name, servicename, value, getattr(old_quota, name))
            continue
        quota_update[name] = newvalue
        strdelta = "+%d" % delta if delta>0 else "%d" % delta
        changelog.append('%s: %d (%s)' % (name, newvalue, strdelta))
    # Update quota
    # Update history
    if quota_update:
        if not opts.dry_run:
            client.quotas.update(projectid, **quota_update)
        else:
            print("Updating %s quota. %s => %s" % (servicename, str({k:v for k,v in old_quota.to_dict().items() if k in quota_update}), str(quota_update)))
        log.info("Updating %s quota. %s => %s" % (servicename, str(old_quota), str(quota_update)))
        return '(%s) %s: %s\n' % (opts.date, servicename, str.join(', ', changelog))
    else:
        return ''

def update_nova_quota(opts, project):
    sess = make_session(opts)
    client = nova_client.Client('2', session=sess)
    quota_names = {
        'cores': 'c_cores',
        'ram': 'c_ram',
        'instances': 'c_instances'
    }

    if opts.c_instances:
        # we need to ensure that the number of neutron ports is at least equal to the number of instances.
        # Cfr. https://www.s3it.uzh.ch/help/issue2009

        if opts.n_port:
            nports = opts.n_port[1]
        else:
            nclient = neutron_client.Client(session=sess)
            nquota = nclient.show_quota(project.id)['quota']
            nports = nquota['port']
        if opts.c_instances[1] > nports:
            raise ValueError(
                "Quota for neutron ports (--n-port) should be at least equal "
                "to the number of instances (--c-instances). Please re-run with "
                "--n-port N with N > %d" % opts.c_instances[1])
    return _update_quota(project.id, opts, quota_names, client, 'NOVA')

def update_swift_quota(opts, project):
    if not opts.s_gigabytes:
        return ""
    sess = make_session(opts)
    kclient = keystone_client.Client(session=sess)
    token = sess.get_token()
    try:
        swift_service = kclient.services.find(type='object-store')
        swift_endpoint = kclient.endpoints.find(service_id=swift_service.id, interface='public')
        storage_url = swift_endpoint.url % dict(tenant_id=project.id)
        log.info("Using swift storage_url %s", storage_url)
    except Exception as ex:
        log.error("No swift endpoint found. (exception was: %s", ex)
        return ''

    try:
        account = swiftclient.head_account(storage_url, token)
    except Exception as ex:
        log.error("Unable to get information on SWIFT project %s: %s", project.id, ex)
        return ''
    currquota = int(account.get('x-account-meta-quota-bytes', -1))
    log.info("Current SWIFT quota for project %s: %d bytes (%d GB)", project.name, currquota, currquota/2**30)
    func, value = opts.s_gigabytes
    # Value is supposed to be in gigabibytes, convert it to bytes
    newvalue = func(currquota, value*2**30)
    delta = newvalue-currquota
    if currquota != -1 and delta == 0:
        log.info("Not updating quota for SWIFT as %s == %s",
                 currquota, newvalue)
        return ''
    try:
        if not opts.dry_run:
            swiftclient.post_account(url=storage_url,
                                     token=token,
                                     headers={'x-account-meta-quota-bytes': str(newvalue)})
        else:
            print("Updating SWIFT quota %s => %s" % (currquota, newvalue))
        log.info("Updating SWIFT quota %s => %s", currquota, newvalue)
    except Exception as ex:
        log.error("Failed to set SWIFT quota %s to tenant %s: %s",
                  newvalue, project.name, ex)

    newvalue_gb = float(newvalue)/2**30
    delta_gb = float(newvalue - currquota)/2**30

    strdelta = '+%d' % delta_gb if delta>0 else "%d" % delta_gb

    return "(%s) SWIFT: %d GiB (%s GiB)\n" % (opts.date, newvalue_gb, strdelta)

def update_cinder_quota(opts, project):
    sess = make_session(opts)
    client = cinder_client.Client('2', session=sess)
    service = 'CINDER(global)'
    quota_names = {
        'gigabytes': 'v_gigabytes',
        'volumes': 'v_volumes'
    }
    if opts.v_volume_type:
        # Update quota for a specific volume type only.
        # check if the volume type exists
        try:
            client.volume_types.find(name=opts.v_volume_type)
        except cex.NotFound:
            log.error("Volume type %s not found." % opts.v_volume_type)
            return ''
        # convert key names
        service = 'CINDER(type:%s)' % opts.v_volume_type
        quota_names = dict(("%s_%s" % (k, opts.v_volume_type), v) for k,v in quota_names.items())
    return _update_quota(project.id, opts, quota_names, client, service)


def update_neutron_quota(opts, project):
    sess = make_session(opts)
    client = neutron_client.Client(session=sess)
    # Neutron is a bit different, so we cannot use _update_quota
    quota_names = {
        'network': 'n_network',
        'subnet': 'n_subnet',
        'floatingip': 'n_floatingip',
        'port': 'n_port',
        'router': 'n_router',
        'security_group': 'n_secgroup',
    }
    servicename='NEUTRON'

    # This is *similar* to _update_quota, but:
    # * client.quotas.<update|get> is now client.<update|show>_quota
    # * quota object is a dict (has items instead of attributes)
    changelog = []
    old_quota = client.show_quota(project.id)['quota']
    quota_update = {}

    for name, option in quota_names.items():
        if not getattr(opts, option): continue
        opt, value = getattr(opts, option)

        oldvalue = old_quota[name]
        newvalue = opt(oldvalue, value)
        delta = newvalue-oldvalue
        if delta == 0:
            log.info("Not updating `%s` quota for service %s. %s == %s",
                     name, servicename, value, old_quota[name])
            continue
        quota_update[name] = newvalue
        strdelta = "+%d" % delta if delta>0 else "%d" % delta
        changelog.append('%s: %d (%s)' % (name, newvalue, strdelta))

    # Update quota
    # Update history
    if quota_update:
        if not opts.dry_run:
            client.update_quota(project.id, {'quota': quota_update})
        else:
            print("Updating %s quota. %s => %s" % (servicename, {k:v for k,v in old_quota.items() if k in quota_update}, str(quota_update)))
        log.info("Updating %s quota. %s" % (servicename, str(quota_update)))
        return '(%s) %s: %s\n' % (opts.date, servicename, str.join(', ', changelog))
    else:
        return ''

def main(opts):
    # warn if not using the OS v3 API endpoint
    if not opts.os_auth_url.endswith('/v3'):
        log.warning(
            "This program needs to use the Keystone API v3,"
            " but the OS_AUTH_URL endpoint does not look like it's v3."
            " A good value for UZH ScienceCloud would be:"
            " `export OS_AUTH_URL=https://cloud.s3it.uzh.ch:35357/v3`")

    # get project
    sess = make_session(opts)
    kclient = keystone_client.Client(session=sess)

    try:
        project = kclient.projects.find(name=opts.project)
        log.debug("Project %s found: %s" % (opts.project, project.to_dict()))
    except kex.NotFound:
        log.error("Project %s not found." % opts.project)
        return 1
    # save log of quota updates
    history = getattr(project, opts.property) if hasattr(project, opts.property) else ''

    if history and history[-1] != '\n':
        # Add a newline if not present, but only on the first entry
        history += '\n'

    updates = ''
    # Get nova changes
    try:
        update = update_nova_quota(opts, project)
        if update:
            updates += update
            print("Quota for nova updated.")
            log.info(update)

        # Get cinder changes
        update = update_cinder_quota(opts, project)
        if update:
            updates += update
            print("Quota for cinder updated.")
            log.info(update)

        # Get neutron changes
        update = update_neutron_quota(opts, project)
        if update:
            updates += update
            print("Quota for neutron updated.")
            log.info(update)

        update = update_swift_quota(opts, project)
        if update:
            updates += update
            print("Quota for SWIFT updated.")
            log.info(update)

        if updates:
            if opts.msg:
                history = "%s(%s) %s\n%s" % (history, opts.date, opts.msg, updates)
            else:
                history += updates
            if not opts.dry_run:
                kclient.projects.update(project.id, **{opts.property: history.rstrip()})
                print("Property `%s` for tenant %s updated." % (opts.property, project.name))
        else:
            print("Nothing to update")
    except Exception as ex:
        # TODO: Proper error checking
        log.error("Unable to update quotas: %s" % ex)
    return 0

if __name__ == "__main__":
    opts = setup()
    sys.exit(main(opts))
