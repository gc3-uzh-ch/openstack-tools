#!/usr/bin/env python
# -*- coding: utf-8 -*-#
#
#
# Copyright (C) 2015, S3IT, University of Zurich. All rights reserved.
#
#
# This program is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the
# Free Software Foundation; either version 2 of the License, or (at your
# option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
"""Tool to increase the quota of a project and keep track of the
changes using a property in the project itself.
"""
__docformat__ = 'reStructuredText'
__author__ = 'Antonio Messina <antonio.s.messina@gmail.com>'

import argparse
import datetime
from collections import defaultdict
import logging
import os
import prettytable
import sys
import csv

from keystoneclient.auth.identity import v3
from keystoneclient import session
from keystoneclient.v3 import client as keystone_client
try:
    # old package name
    import keystoneclient.openstack.common.apiclient.exceptions as kex
except ImportError:
    import keystoneclient.exceptions as kex

from novaclient import client as nova_client
from cinderclient import client as cinder_client
import cinderclient.exceptions as cex
from neutronclient.v2_0 import client as neutron_client

log = logging.getLogger()
log.addHandler(logging.StreamHandler())

class ProjectNotFound(Exception):
    pass


class UserNotFound(Exception):
    pass


def make_session(opts):
    """Create a Keystone session"""
    auth = v3.Password(auth_url=opts.os_auth_url,
                       username=opts.os_username,
                       password=opts.os_password,
                       project_name=opts.os_project_name,
                       user_domain_id=opts.os_user_domain_id,
                       project_domain_id=opts.os_project_domain_id)
    sess = session.Session(auth=auth)
    return sess


class EnvDefault(argparse.Action):
    # This is took from
    # http://stackoverflow.com/questions/10551117/setting-options-from-environment-variables-when-using-argparse
    def __init__(self, envvar, required=True, default=None, **kwargs):
        if not default and envvar:
            if envvar in os.environ:
                default = os.environ[envvar]
        if required and default:
            required = False
        super(EnvDefault, self).__init__(default=default, required=required,
                                         **kwargs)

    def __call__(self, parser, namespace, values, option_string=None):
        setattr(namespace, self.dest, values)

def mktime(datestring):
    return datetime.datetime.strptime(datestring, STD_DATE_FMT).strftime(STD_DATE_FMT)

def setup(argv=sys.argv[1:]):
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument('--os-username',
                        action=EnvDefault,
                        envvar="OS_USERNAME",
                        help='OpenStack administrator username. If not supplied, the value of the '
                        '"OS_USERNAME" environment variable is used.')
    parser.add_argument('--os-password',
                        action=EnvDefault,
                        envvar="OS_PASSWORD",
                        help='OpenStack administrator password. If not supplied, the value of the '
                        '"OS_PASSWORD" environment variable is used.')
    parser.add_argument('--os-project-name',
                        action=EnvDefault,
                        envvar="OS_PROJECT_NAME",
                        help='OpenStack administrator project name. If not supplied, the value of the '
                        '"OS_PROJECT_NAME" environment variable is used.')
    parser.add_argument('--os-auth-url',
                        action=EnvDefault,
                        envvar="OS_AUTH_URL",
                        help='OpenStack auth url endpoint. If not supplied, the value of the '
                        '"OS_AUTH_URL" environment variable is used.')
    parser.add_argument('--os-user-domain-id',
                        default='default')
    parser.add_argument('--os-project-domain-id',
                        default='default')
    parser.add_argument('-f', '--format', choices=['text', 'csv', 'table'], default='table')
    parser.add_argument('-v', '--verbose', action='count', default=0,
                        help='Increase verbosity')
    parser.add_argument('--project')
    parser.add_argument('--user')
    parser.add_argument('--show-email', default=False, action='store_true')
    opts = parser.parse_args(argv)

    # Set verbosity
    verbosity = max(0, 3-opts.verbose) * 10
    log.setLevel(verbosity)
    return (opts, parser)



def main(opts):
    # get project
    sess = make_session(opts)
    kclient = keystone_client.Client(session=sess)

    roles = {r.id: r for r in kclient.roles.list()}

    if opts.project:
        projects = {p.id: p for p in kclient.projects.list(name=opts.project)}
        if not projects:
            raise ProjectNotFound("No project found with name %s" % opts.project)
        role_assignment = kclient.role_assignments.list(project=list(projects.keys())[0])
    else:
        if opts.user:
            # Check if user is present
            try:
                kclient.users.get(opts.user)
            except Exception:
                raise UserNotFound("No user found with name %s" % opts.user)
            role_assignment = kclient.role_assignments.list(user=opts.user)
        else:
            role_assignment = kclient.role_assignments.list()
        projects = {p.id: p for p in kclient.projects.list()}


    project_mapping = defaultdict(list)
    user_mapping = defaultdict(list)

    for role in role_assignment:
        rolename = roles.get(role.role['id']).name
        username = role.user['id']
        project = projects.get(role.scope['project']['id']).name

        user_mapping[username].append({'project': project,
                                       'role': rolename})
        project_mapping[project].append({'user': username,
                                       'role': rolename})
    all_emails = {}
    if opts.show_email:
        for uid in user_mapping:
            try:
                user = kclient.users.get(uid)
                all_emails[uid] = user.email
            except Exception as ex:
                log.warning("Unable to find user %s: %s", uid, ex)
                all_emails[uid] = 'UNKNOWN_USER'

    return (user_mapping, project_mapping, all_emails)

def print_projects(project_mapping, opts, emails):
    header = ['Project', 'User', 'Role']
    rows = []
    if emails:
        header.append('User email')
    for project, role in sorted(project_mapping.items()):
        for user in sorted(role, key=lambda x: x['user']):
            row = [project, user['user'], user['role']]
            if emails:
                row.append(emails[user['user']])
            rows.append(row)

    if opts.format == 'text':
        print_projects_text(header, rows)
    elif opts.format == 'csv':
        print_projects_csv(header, rows)
    elif opts.format == 'table':
        print_projects_table(header, rows)

def print_users(user_mapping, opts, emails):
    header = ['User', 'Project', 'Role']
    rows = []
    if emails:
        header.append('User email')
    for user, projects in sorted(user_mapping.items()):
        for project in sorted(projects, key=lambda x: x['project']):
            row = [user, project['project'], project['role']]
            if emails:
                row.append(emails[user])
            rows.append(row)

    if opts.format == 'text':
        print_users_text(header, rows)
    elif opts.format == 'csv':
        print_users_csv(header, rows)
    elif opts.format == 'table':
        print_users_table(header, rows)

def print_projects_text(header, rows):
    project = ''
    for row in rows:
        if project != row[0]:
            project = row[0]
            print(project)
        extra = ''
        if len(row) > 3:
            extra = ' ' + str.join(', ', row[3:])

        print("  %s (%s)%s" % (row[1], row[2], extra))

def print_projects_table(header, rows):
    pt = prettytable.PrettyTable(header)
    pt.align['Project'] = 'l'
    for row in rows:
        pt.add_row(row)
    print(pt)

def print_projects_csv(header, rows):
    writer = csv.writer(sys.stdout)
    writer.writerow([header])
    writer.writerows(rows)

def print_users_text(header, rows):
    user = ''
    for row in rows:
        if user != row[0]:
            user = row[0]
            print(user)
        extra = ''
        if len(row) > 3:
            extra = ' ' + str.join(', ', row[3:])
        print("  %s (%s)%s" % (row[1], row[2], extra))

def print_users_table(header, rows):
    pt = prettytable.PrettyTable(header)
    pt.align['User'] = 'l'
    for row in rows:
        pt.add_row(row)
    print(pt)

def print_users_csv(header, rows):
    writer = csv.writer(sys.stdout)
    writer.writerow(header)
    writer.writerows(rows)

if __name__ == "__main__":
    (opts, parser) = setup()
    try:
        user_mapping, project_mapping, emails = main(opts)
    except (ProjectNotFound, UserNotFound) as ex:
        parser.error(ex)

    if opts.user:
        print_projects(project_mapping, opts, emails)
    else:
        print_users(user_mapping, opts, emails)
