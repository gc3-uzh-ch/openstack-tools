#!/usr/bin/env python
# -*- coding: utf-8 -*-#
#
#
# Copyright (C) 2015, S3IT, University of Zurich. All rights reserved.
#
#
# This program is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the
# Free Software Foundation; either version 2 of the License, or (at your
# option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
"""
Get the current load on the hypervisors, print how many VMs for each flavor can be started.
Also takes into account host aggregates and cpu_allocation_ratio for each host aggregate.
"""
__docformat__ = 'reStructuredText'
__author__ = 'Antonio Messina <antonio.s.messina@gmail.com>'

import argparse
import json
import logging
import os
import prettytable
import sys
from collections import OrderedDict
import datetime

from keystoneclient.auth.identity import v3
from keystoneclient import session
from keystoneclient.v3 import client as keystone_client
try:
    # old package name
    from keystoneclient.openstack.common.apiclient.exceptions import NotFound
except ImportError:
    from keystoneclient.exceptions import NotFound

from novaclient import client as nova_client
from cinderclient import client as cinder_client

log = logging.getLogger()
log.addHandler(logging.StreamHandler())

DEFAULT = {
    'CEPH_VMS_SIZE': 1200 * 2**20 * 0.4,
    'CEPH_CINDER_SIZE': 1200 * 2**20 * 0.6,
    'GPU_T4_SLOTS': 4,
    'GPU_P4_SLOTS': 2,
}

def mib_to_str(value):
    if abs(value) > 2**20:
        return "%.2f TB" % (value/2**20)
    elif abs(value) > 2**10:
        return "%.2f GB" % (value/2**10)
    else:
        return "%.2f MB" % value

def memoize(f):
    memo = {}
    def helper(x):
        if f not in memo:
            memo[f] = f(x)
        return memo[f]
    return helper

@memoize
def make_session(opts):
    """Create a Keystone session"""
    auth = v3.Password(auth_url=opts.os_auth_url,
                       username=opts.os_username,
                       password=opts.os_password,
                       project_name=opts.os_project_name,
                       user_domain_name=opts.os_user_domain_name,
                       project_domain_name=opts.os_project_domain_name)
    sess = session.Session(auth=auth)
    return sess

class ProxyFlavor(object):
    def __init__(self, cls):
        object.__setattr__(self, "_obj", cls)
    def __getattribute__(self, name):
        if name == 'get_keys':
            obj = object.__getattribute__(self, "_obj")
            def return_cached_key():
                try:
                    return obj.cached_get_keys
                except AttributeError:
                    obj.cached_get_keys = obj.get_keys()
                    return obj.cached_get_keys
            return return_cached_key

        return getattr(object.__getattribute__(self, "_obj"), name)
    def __delattr__(self, name):
        delattr(object.__getattribute__(self, "_obj"), name)
    def __setattr__(self, name, value):
        setattr(object.__getattribute__(self, "_obj"), name, value)

    def __nonzero__(self):
        return bool(object.__getattribute__(self, "_obj"))
    def __str__(self):
        return str(object.__getattribute__(self, "_obj"))
    def __repr__(self):
        return repr(object.__getattribute__(self, "_obj"))

class EnvDefault(argparse.Action):
    # This is took from
    # http://stackoverflow.com/questions/10551117/setting-options-from-environment-variables-when-using-argparse
    def __init__(self, envvar, required=True, default=None, **kwargs):
        if envvar in os.environ:
            default = os.environ[envvar]
        if required and default:
            required = False
        super(EnvDefault, self).__init__(default=default, required=required,
                                         **kwargs)

    def __call__(self, parser, namespace, values, option_string=None):
        setattr(namespace, self.dest, values)

def setup():
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument('--os-username',
                        action=EnvDefault,
                        envvar="OS_USERNAME",
                        help='OpenStack administrator username. If not supplied, the value of the '
                        '"OS_USERNAME" environment variable is used.')
    parser.add_argument('--os-password',
                        action=EnvDefault,
                        envvar="OS_PASSWORD",
                        help='OpenStack administrator password. If not supplied, the value of the '
                        '"OS_PASSWORD" environment variable is used.')
    parser.add_argument('--os-project-name',
                        action=EnvDefault,
                        envvar="OS_PROJECT_NAME",
                        help='OpenStack administrator project name. If not supplied, the value of the '
                        '"OS_PROJECT_NAME" environment variable is used.')
    parser.add_argument('--os-user-domain-name',
                        action=EnvDefault,
                        default='default',
                        envvar="OS_USER_DOMAIN_NAME",
                        help='OpenStack administrator user name. If not supplied, the value of the '
                        '"OS_USER_DOMAIN_NAME" environment variable is used.')
    parser.add_argument('--os-project-domain-name',
                        action=EnvDefault,
                        default='default',
                        envvar="OS_PROJECT_DOMAIN_NAME",
                        help='OpenStack administrator project name. If not supplied, the value of the '
                        '"OS_PROJECT_DOMAIN_NAME" environment variable is used.')
    parser.add_argument('--os-auth-url',
                        action=EnvDefault,
                        envvar="OS_AUTH_URL",
                        help='OpenStack auth url endpoint. If not supplied, the value of the '
                        '"OS_AUTH_URL" environment variable is used.')
    parser.add_argument('--json', action='store_true')
    parser.add_argument('-l', '--long', action='store_true')
    parser.add_argument('-v', '--verbose', action='count', default=0,
                        help='Increase verbosity')
    parser.add_argument('--cinder', action='store_true')
    opts = parser.parse_args()

    # Set verbosity
    verbosity = max(0, 3-opts.verbose) * 10
    log.setLevel(verbosity)

    return opts

class NotMatching(Exception): pass

def filter_by_spec(flavor, hypervisors):
    valid_hypervisors = []
    for node in hypervisors:
        try:
            for key, val in flavor.get_keys().items():
		if key != 'pci_passthrough:alias' and not any([ag.metadata.get(key) == val for ag in node.aggregates]):
                    raise NotMatching()
            valid_hypervisors.append(node)
        except NotMatching:
            pass
    return valid_hypervisors

def compute_pci_slots_node_capability(max_vms, curr_vms):
    return max_vms - curr_vms

def compute_capability(flavor, hypervisors):
    hypervisors = filter_by_spec(flavor, hypervisors)
    count = 0
    max_count = 0
    max_count_wo_disabled = 0

    for node in hypervisors:
        vms_by_mem = node.memory_mb_free / flavor.ram
        max_vms_by_mem = node.memory_mb / flavor.ram

        if 'gpu' in flavor.name:
            if 'gpuT4' in flavor.name:
                n_maxvms = min(
                    DEFAULT['GPU_T4_SLOTS'],
                    max_vms_by_mem
                    )
            elif 'gpuP4' in flavor.name:
                n_maxvms = min(
                    DEFAULT['GPU_P4_SLOTS'],
                    max_vms_by_mem
                    )
            #else throw exception
            n_vms = min(
                compute_pci_slots_node_capability(n_maxvms, node.running_vms),
                vms_by_mem
                )
        else:
            vms_by_cpus = int((node.vcpus_max - node.vcpus_used) / flavor.vcpus)
            n_vms = min(
                vms_by_cpus,
                vms_by_mem)
            max_vms_by_cpus = int((node.vcpus_max) / flavor.vcpus)
            n_maxvms = min(
                max_vms_by_cpus,
                max_vms_by_mem)
        if n_vms < 0: n_vms = 0
        count += n_vms
        max_count += n_maxvms
        if node.status == 'enabled':
            max_count_wo_disabled += n_vms
    return max_count, count, max_count_wo_disabled

def main(opts):
    sess = make_session(opts)
    #keystone = keystone_client.Client(session=sess)
    nova = nova_client.Client('2', session=sess)
    if opts.cinder:
        cinder = cinder_client.Client('2', session=sess)

    #stats = nova.hypervisors_stats.statistics()
    aggregates = nova.aggregates.list()
    hypervisors = nova.hypervisors.list()

    for hyp in hypervisors:
        # Set the proper allocation ratio, depending on the aggregate
        hyp.cpu_allocation_ratio = 1.0
        hyp.aggregates = []
        for ag in aggregates:
            if hyp.hypervisor_hostname in ag.hosts:
                hyp.aggregates.append(ag)
                if 'cpu_allocation_ratio' in ag.metadata:
                    ratio = float(ag.metadata['cpu_allocation_ratio'])
                    hyp.cpu_allocation_ratio = max(hyp.cpu_allocation_ratio, ratio)
        # Update free cpus and ram
        hyp.vcpus_max = hyp.vcpus * hyp.cpu_allocation_ratio
        hyp.vcpus_free = hyp.vcpus_max - hyp.vcpus_used
        hyp.memory_mb_free = hyp.memory_mb - hyp.memory_mb_used

    all_vms = nova.servers.list(search_opts={'all_tenants': 'True'})
    log.info("%d vms currently running" % len(all_vms))

    data = {'summary': {}, 'hypervisors': [], 'flavors': []}
    if opts.long:
        detail = data['hypervisors']
        for hyp in hypervisors:
            detail.append(
                {'hostname': hyp.hypervisor_hostname,
                'state': "%s/%s" % (hyp.state, hyp.status),
                'cores': hyp.vcpus,
                'vcpus': hyp.vcpus_max,
                'VMs': len([vm for vm in all_vms if getattr(vm, 'OS-EXT-SRV-ATTR:hypervisor_hostname') == hyp.hypervisor_hostname]),
                'vcpus_used': hyp.vcpus_used,
                'vcpus_free': hyp.vcpus_free,
                'mem': hyp.memory_mb,
                'mem_used': hyp.memory_mb_used,
                'mem_free': hyp.memory_mb_free,
                })

    flavors = {fl.id:fl for fl in nova.flavors.list(is_public=None)}
    if opts.cinder:
        volumes = cinder.volumes.list(search_opts={'all_tenants': 'true'})

    # Collect data on the general availability of vcpus and memory
    enabled_hypervisors = filter(lambda x: x.status == 'enabled', hypervisors)

    avail_cpus = sum(h.vcpus*h.cpu_allocation_ratio for h in enabled_hypervisors)
    used_cpus = sum(h.vcpus_used for h in hypervisors)

    data['summary'] = OrderedDict([
        ('hypervisors', len(hypervisors)),
        ('hypervisors enabled', len(enabled_hypervisors)),
        ('vcpus', sum(h.vcpus*h.cpu_allocation_ratio for h in hypervisors)),
        ('available vcpus', avail_cpus),
        ('vcpus free', sum(h.vcpus_free for h in enabled_hypervisors)),
        ('vcpus used', used_cpus),
        ('vcpus usage %', '%.2f %%' % (float(used_cpus)/avail_cpus*100)),
        ('vms', len(all_vms)),
        ('mem', sum(h.memory_mb for h in enabled_hypervisors)),
        ('mem_used', sum(h.memory_mb_used for h in enabled_hypervisors)),
        ('disk_used', sum(flavors[vm.flavor['id']].disk for vm in all_vms if vm.flavor['id'] in flavors)*1024),
    ])
    if opts.cinder:
        data['summary']['volumes_used'] =  sum(v.size for v in volumes)*1024

    # For each flavor, check how many can be ran
    if len(enabled_hypervisors) != hypervisors:
        log.warning("Ignoring %d disabled hypervisors" % (len(hypervisors) - len(enabled_hypervisors)))

    # AM: Cool, use a boolean to store 3 different values.  When
    # calling flavors.list with is_public=None, all flavors will be
    # returned (public and private). Instead, when calling it with
    # is_public=True (default) all public flavors **and some private
    # flavor** is returned. Interesting enough, there is no
    # documentation of the "is_public" attribute on the API
    # documentation at
    # http://developer.openstack.org/api-ref-compute-v2.1.html but
    # it's present at
    # http://developer.openstack.org/api-ref/compute/?expanded=list-flavors-with-details-detail
    #
    # Also check https://github.com/openstack/nova/blob/master/nova/api/openstack/compute/flavors.py#L61
    for flavor in flavors.values():
        flavor = ProxyFlavor(flavor)
        log.debug("Computing capability for flavor %s" % flavor.name)
        maxf, availf, availf_enabled = compute_capability(flavor, hypervisors)
        data['flavors'].append(
            {'name': flavor.name,
             'visibility': 'public' if flavor.is_public else 'private',
             'current': len([vm for vm in all_vms if vm.flavor['id'] == flavor.id]),
             'max': maxf,
             'avail': availf,
             'avail_enabled': availf_enabled,
            })

    # Finally, collect data on allocated quota
    keystone = keystone_client.Client(session=sess)
    quota_allocation = {'vcpus': 0,
                        'mem': 0,
                        'vms_disk': 0,
    }
    if opts.cinder:
        quota_allocation['cinder_mb'] = 0

    for project in keystone.projects.list():
        quota = nova.quotas.get(project.id)
        quota_allocation['vcpus'] += quota.cores
        quota_allocation['mem'] += quota.ram
        quota_allocation['vms_disk'] += quota.instances * 100 * 1024
        if opts.cinder:
            cquota = cinder.quotas.get(project.id)
            quota_allocation['cinder_mb'] += cquota.gigabytes * 1024

    data['quota_allocation'] = quota_allocation
    return data

def print_table(data):
    # Print deailed hypervisor information
    if data['hypervisors']:
        pt = prettytable.PrettyTable(('Hostname', 'state', 'cores', 'vcpus', 'VMs', 'vcpus_used', 'vcpus_free', 'mem', 'mem_used', 'mem_free'))
        for field in pt.field_names:
            pt.align[field] = 'r'
        pt.align['Hostname'] = 'l'

        for hyp in data['hypervisors']:
            pt.add_row([
                hyp['hostname'],
                hyp['state'],
                hyp['cores'],
                hyp['vcpus'],
                hyp['VMs'],
                hyp['vcpus_used'],
                hyp['vcpus_free'],
                mib_to_str(hyp['mem']),
                mib_to_str(hyp['mem_used']),
                mib_to_str(hyp['mem_free']),
                ])
        print(pt.get_string(sortby='Hostname'))

    # Print summary
    pt = prettytable.PrettyTable(('property','value'))
    pt.align['property'] = 'l'
    pt.align['value'] = 'r'
    for key,value in data['summary'].items():
        pt.add_row([key, value])
    print("Summary")
    print(pt)

    # Print detailed flavor information
    pt = prettytable.PrettyTable(('flavor', 'visibility', 'current', 'max', 'avail', 'avail (enabled)'))
    for field in pt.field_names:
        pt.align[field] = 'r'
    pt.align['flavor'] = 'l'
    pt.align['visibility'] = 'l'
    for flavor in data['flavors']:
        pt.add_row([
            flavor['name'],
            flavor['visibility'],
            flavor['current'],
            flavor['max'],
            flavor['avail'],
            flavor['avail_enabled'],
        ])
    print("Per-flavor usage and availability")
    print(pt.get_string(sortby='max', reversesort=True))

    # Print allocation based on quota
    pt = prettytable.PrettyTable(('name', 'available', 'used', 'allocated', 'overbooking'))
    for field in pt.field_names:
        pt.align[field] = 'r'
    pt.align['name'] = 'l'
    pt.add_row([
        'vcpus',
        data['summary']['vcpus'],
        data['summary']['vcpus used'],
        data['quota_allocation']['vcpus'],
        "%.2f %%" % (data['quota_allocation']['vcpus']*100.0/data['summary']['vcpus']),
    ])
    pt.add_row([
        'ram',
        mib_to_str(data['summary']['mem']),
        mib_to_str(data['summary']['mem_used']),
        mib_to_str(data['quota_allocation']['mem']),
        "%.2f %%" % (data['quota_allocation']['mem']*100.0/data['summary']['mem']),
    ])
    pt.add_row([
        'root disk',
        mib_to_str(DEFAULT['CEPH_VMS_SIZE']),
        mib_to_str(data['summary']['disk_used']),
        mib_to_str(data['quota_allocation']['vms_disk']),
        "%.2f %%" % (data['quota_allocation']['vms_disk']*100.0/DEFAULT['CEPH_VMS_SIZE']),
    ])
    if 'volumes_used' in data['summary']:
        pt.add_row([
            'volumes',
            mib_to_str(DEFAULT['CEPH_CINDER_SIZE']),
            mib_to_str(data['summary']['volumes_used']),
            mib_to_str(data['quota_allocation']['cinder_mb']),
            "%.2f %%" % (data['quota_allocation']['cinder_mb']*100.0/DEFAULT['CEPH_VMS_SIZE']),
        ])
    print("Quota allocation")
    print(pt)

if __name__ == "__main__":
    opts = setup()
    data = main(opts)
    data['timestamp'] = datetime.datetime.utcnow().strftime('%d/%m/%Y %H:%M:%S UTC')

    if opts.json:
        print(json.dumps(data))
    else:
        print_table(data)
