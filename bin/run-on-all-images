#!/usr/bin/env python
# -*- coding: utf-8 -*-#
# @(#)run-on-all-images
#
#
# Copyright (C) 2014, GC3, University of Zurich. All rights reserved.
#
#
# This program is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the
# Free Software Foundation; either version 2 of the License, or (at your
# option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
"""
This script will run an instance for each public glance image, and then will execute a command.

Created to test if all the instances have a specific command.
"""
__docformat__ = 'reStructuredText'
__author__ = 'Antonio Messina <antonio.s.messina@gmail.com>'

import argparse
import logging
import multiprocessing as mp
import operator
import os
import paramiko
import Queue
import socket
import sys
import time

import novaclient.exceptions as nova_ex
from glanceclient import client as glance_client
from keystoneclient import client as keystone_client
from novaclient import client as nova_client

DEFAULT_COMMAND="which fsfreeze"
WAIT=5
TIMEOUT=5

### Logging configuration
class MinLevelFilter(logging.Filter):
    def __init__(self, level):
        self.minlevel = level

    def filter(self, record):
        return (record.levelno >= self.minlevel)

class MaxLevelFilter(logging.Filter):
    def __init__(self, level):
        self.maxlevel = level

    def filter(self, record):
        return (record.levelno <= self.maxlevel)

#h1 = logging.StreamHandler(sys.stdout)
h1 = logging.StreamHandler(sys.stderr)
h2 = logging.StreamHandler(sys.stderr)
f1 = MaxLevelFilter(logging.INFO)
f2 = MinLevelFilter(logging.WARNING)
h1.addFilter(f1)
h2.addFilter(f2)

formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')
h1.setFormatter(formatter)
h2.setFormatter(formatter)

log = logging.getLogger('run-on-all-images')
log.addHandler(h1)
log.addHandler(h2)
# Level set from the command line
# log.setLevel(logging.DEBUG)
###


class OSAuth(object):
    def __init__(self, user, password, tenant, auth_url):
        self.user = user
        self.password = password
        self.tenant = tenant
        self.auth_url = auth_url


class Command(object):
    def __init__(self, image_id, flavorname, key_name, cmd):
        self.image_id = image_id
        self.image_name = ''
        self.flavorname = flavorname
        self.key_name = key_name
        self.cmd = cmd
        self.exit_status = None
        self.stdout = ''
        self.stderr = ''

    def __call__(self, nova):
        """Create vm, run command, save results"""
        image = nova.images.get(self.image_id)
        self.image_name = image.name
        flavor = nova.flavors.find(name=self.flavorname)

        # Starting the VM
        try:
            log.debug("Creating instance with image id %s (%s) ", image.id, image.name)
            vm = nova.servers.create('Running `%s` on `%s`' % (args.command, image.name),
                                     image.id, flavor, key_name=self.key_name)
            log.info("VM %s started using image %s (%s)", vm.id, image.name, image.id)
        except Exception as ex:
            log.error("Error starting vm with image %s (%s): %s", image.name, image.id, ex)
            return
        while vm.status == 'BUILD':
            vm = nova.servers.get(vm)
            log.debug("VM %s still building... waiting %d seconds", vm.id, WAIT)
            time.sleep(WAIT)
        if vm.status != 'ACTIVE':
            log.warning("VM %s didn't start correctly: in state %s. Deleting it!", vm.id, vm.status)
            self.exit_status = -1
            vm.delete()
        else:
            log.info("VM %s(%s) in status ACTIVE", vm.name, vm.id)
            for iteration in range(6*10): # 10 minutes
                # Wait for the network
                vm = nova.servers.get(vm)
                if not vm.networks:
                    log.debug("VM %s network not ready... waiting %d seconds", vm.id, 10)
                    time.sleep(10)
                    continue

                self.run_command(vm, self.cmd)
                if self.exit_status is not None:
                    break

            if self.exit_status is None:
                log.error("Too many iterations, ignoring output from instance '%s' (%s)", vm.name, vm.id)
        vm.delete()
        log.debug("command %s on image '%s' DONE with exit status %s", self.cmd, self.image_name, self.exit_status)

    def run_command(self, vm, cmd):
        # Connecting via ssh
        ssh = paramiko.SSHClient()
        ssh.set_missing_host_key_policy(IgnorePolicy())
        all_ips = reduce(operator.add, vm.networks.values())
        for ip in all_ips:
            if args.verbose:
                log.debug("Trying to connect to %s" % ip)
            try:
                ssh.connect(ip, username=args.ssh_username,
                            allow_agent=True,
                            timeout=TIMEOUT)
                # No exception means connection was successful.
                break
            except (socket.error, socket.timeout) as ex:
                # Maybe the machine is not up&running yet
                log.debug("Host unreachable")
                continue
            except paramiko.AuthenticationException as ex:
                # Possibly unrecoverable error: wrong keypair or wrong username
                # Try one more time, just in case
                log.error("%s (%s): Authentication error", vm.name, vm.id)
                ssh.close()
                self.exit_status = -1
                break
            except paramiko.SSHException as ex:
                # Probably a temporary error, let's hope for the best
                log.debug("Ignoring error '%s'" % ex)
                continue

        # If we reach this point, we should have a valid connection
        if not ssh.get_transport() or not ssh.get_transport().is_active():
            log.debug("Connection not ready yet")
            return
        session = ssh.get_transport().open_session()
        session.exec_command(args.command)
        maxwait = 120
        for i in range(maxwait):
            if session.recv_ready():
                break
            log.debug("Waiting for command to return")
            time.sleep(1)
        while session.recv_ready():
            log.debug("reading 1024 bytes from stdout")
            self.stdout += session.recv(1024)
        while session.recv_stderr_ready():
            self.stderr += session.recv_stderr(1024)
        self.exit_status = session.recv_exit_status()
        session.close()


class Worker(mp.Process):
    def __init__(self, task_queue, result_queue, name, auth):
        mp.Process.__init__(self)
        self.name = str(name)
        self.task_queue = task_queue
        self.result_queue = result_queue
        self.nova = nova_client.Client('1.1', auth.user, auth.password,
                                       auth.tenant, auth.auth_url)
        self.nova.authenticate()

    def run(self):
        self.images = 0
        while True:
            log.debug("Executing task: %s", self.name)
            try:
                task = self.task_queue.get(block=False)
            except Queue.Empty:
                log.debug("Queue empty. Exiting. (%s)", self.name)
                break
            try:
                task(self.nova)
            except Exception as ex:
                log.warning("%s Got an exception: %s", self.name, ex)
            self.images += 1
            log.debug("Adding result of execution")
            self.result_queue.put(task)
            # Printing the results right away
            if task.exit_status == 0:
                for line in task.stdout.strip().split('\n'):
                    print("%s:%s:%s" % (task.image_id, task.exit_status, line))
                log.info("Image %s (%s) exit_status: %s, output: \n%s", task.image_name, task.image_id, task.exit_status, task.stdout.strip())
                for line in task.stderr.strip().split('\n'):
                    if line:
                        log.error("%s:%s:%s" % (task.image_id, task.exit_status, line))
            else:
                if task.exit_status is None:
                    log.error("Command didn't run on image %s (%s)", task.image_id, task.image_name)
                else:
                    log.error("Command exited `%s` in image %s (%s)",
                              task.exit_status, task.image_id, task.image_name)
                for line in task.stdout.strip().split('\n'):
                    if line:
                        log.error("%s (%s) STDOUT %s", task.image_name, task.image_id, line)
                for line in task.stderr.strip().split('\n'):
                    if line:
                        log.error("%s (%s) STDERR %s", task.image_name, task.image_id, line)
        log.info("Worker %s exiting", self.name)

class EnvDefault(argparse.Action):
    # This is took from
    # http://stackoverflow.com/questions/10551117/setting-options-from-environment-variables-when-using-argparse
    def __init__(self, envvar, required=True, default=None, **kwargs):
        if envvar in os.environ:
            default = os.environ[envvar]
        if required and default:
            required = False
        super(EnvDefault, self).__init__(default=default, required=required,
                                         **kwargs)

    def __call__(self, parser, namespace, values, option_string=None):
        setattr(namespace, self.dest, values)

class IgnorePolicy(paramiko.MissingHostKeyPolicy):
    def missing_host_key(self, client, hostname, key):
        pass


if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument('-k', '--key-name', required=1, help='Keypair name.')
    parser.add_argument('--os-username', action=EnvDefault, envvar="OS_USERNAME",
                        help='OpenStack administrator username. If not supplied, the value of the '
                        '"OS_USERNAME" environment variable is used.')
    parser.add_argument('--os-password', action=EnvDefault, envvar="OS_PASSWORD",
                        help='OpenStack administrator password. If not supplied, the value of the '
                        '"OS_PASSWORD" environment variable is used.')
    parser.add_argument('--os-tenant-name', action=EnvDefault, envvar="OS_TENANT_NAME",
                        help='OpenStack administrator tenant name. If not supplied, the value of the '
                        '"OS_TENANT_NAME" environment variable is used.')
    parser.add_argument('--os-auth-url', action=EnvDefault, envvar="OS_AUTH_URL",
                        help='OpenStack auth url endpoint. If not supplied, the value of the '
                        '"OS_AUTH_URL" environment variable is used.')

    parser.add_argument('-f', '--flavor', default='m1.tiny', help='Flavor.')
    parser.add_argument('--public-images', action="store_true", default=False, help='Only use public images. Ignored if --images is used')
    parser.add_argument('-u', '--ssh-username', default='root', help='Username to use to connect to the VM')
    parser.add_argument('-v', '--verbose', action="count")
    parser.add_argument('-p', '--parallel', type=int, default=10, help='Start N instances in parallel. Default: %(default)s', metavar='N')
    parser.add_argument('--images', nargs='*', help='Image IDs. Default: all images')

    parser.add_argument('-c', '--command', help='command to execute (quoted). Default: `%(default)s`', default=DEFAULT_COMMAND)
    args = parser.parse_args()

    if not args.verbose:
        args.verbose = 0
    log.setLevel(30-(10*args.verbose))
    if log.level < 10:
        log.level = 10
    keystone = keystone_client.Client('2.0', username=args.os_username,
                                      password=args.os_password,
                                      tenant_name=args.os_tenant_name,
                                      auth_url=args.os_auth_url)

    glance_url = keystone.service_catalog.url_for(service_type='image')
    auth_token = keystone.auth_token
    glance = glance_client.Client('1', endpoint=glance_url, token=auth_token)
    images = []
    log.debug("Retrieving images")
    if not args.images:
        if args.public_images:
            images = [img for img in glance.images.list() if img.is_public]
            log.debug("Only public images retrieved (%d)", len(images))
        else:
            images = list(glance.images.list())
            log.debug("All images retrieved (%d)", len(images))
    else:
        images = [img for img in glance.images.list() if img.name in args.images or img.id in args.images]
        log.debug("Only specific images retrieved (%d)", len(images))

    # Sort by image name
    images.sort(key=lambda x: x.name)
    nova = nova_client.Client('1.1', args.os_username,
                              args.os_password,
                              args.os_tenant_name,
                              args.os_auth_url)
    try:
        flavor = nova.flavors.find(name=args.flavor)
    except nova_ex.NotFound as ex:
        log.error("Flavor `%s` not found.", args.flavor)
        log.error("Available flavors:")
        log.error("* %s", str.join('\n* ', [fl.name for fl in nova.flavors.list()]))
        sys.exit(1)

    try:
        keypair = nova.keypairs.find(name=args.key_name)
    except nova_ex.NotFound as ex:
        log.error("Keypair with name `%s` not found.", args.key_name)
        log.error("Available keypairs:")
        log.error("* %s", str.join('\n* ', [kp.name for kp in nova.keypairs.list()]))
        sys.exit(1)

    failed_images = []

    # Create authentication object
    auth = OSAuth(args.os_username, args.os_password, args.os_tenant_name, args.os_auth_url)

    # Add images id into the queue
    tasks = mp.Queue()
    results = mp.Queue()
    for image in images:
        imgsize = float(image.size) / 2**30
        if imgsize > flavor.disk:
            log.warning("Image '%s' cannot be started with flavor '%s'. "
                        "Image size: %.3fGB, flavor root disk: %d",
                        image.name, flavor.name, imgsize, flavor.disk)
            continue
        tasks.put(Command(image.id, flavor.name, keypair.name, args.command))

    # Create consumers
    workers = [Worker(tasks, results, "worker-%d" % i, auth) for i in range(args.parallel)]
    for worker in workers:
        worker.start()

    while True:
        for worker in workers:
            try:
                worker.join(timeout=WAIT)
            except Exception as ex:
                log.error("Getting error %s (%s) while joining task %s", ex, ex.__class__, worker.name)
        if True not in [i.is_alive() for i in workers]:
            log.info("All workers have exited.")
            break

    results = [results.get() for i in range(results.qsize())]
    # while not results.empty():
    #     result = results.get()
    #     if result.exit_status == 0:
    #         for line in result.stdout.strip().split('\n'):
    #             print("%s:%s:%s" % (result.image_id, result.exit_status, line))
    #         log.info("Image %s (%s) exit_status: %s, output: \n%s", result.image_name, result.image_id, result.exit_status, result.stdout.strip())
    #         for line in result.stderr.strip().split('\n'):
    #             if line:
    #                 log.error("%s:%s:%s" % (result.image_id, result.exit_status, line))
    #     else:
    #         if result.exit_status is None:
    #             log.error("Command didn't run on image %s (%s)", result.image_id, result.image_name)
    #         else:
    #             log.error("Command exited `%s` in image %s (%s)",
    #                       result.exit_status, result.image_id, result.image_name)
    #         for line in result.stdout.strip().split('\n'):
    #             if line:
    #                 log.error("%s (%s) STDOUT %s", result.image_name, result.image_id, line)
    #         for line in result.stderr.strip().split('\n'):
    #             if line:
    #                 log.error("%s (%s) STDERR %s", result.image_name, result.image_id, line)
    # sys.exit(0)
