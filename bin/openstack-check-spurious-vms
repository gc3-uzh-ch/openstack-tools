#!/usr/bin/env python
# -*- coding: utf-8 -*-#
# @(#)openstack-check-spurious-vms
#
#
# Copyright (C) 2013, GC3, University of Zurich. All rights reserved.
#
#
# This program is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the
# Free Software Foundation; either version 2 of the License, or (at your
# option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA

from __future__ import print_function

__docformat__ = 'reStructuredText'
__author__ = 'Antonio Messina <antonio.s.messina@gmail.com>'


# pdsh -g nova-compute -l root virsh list | grep instance | (while read node virsh_id nova_id rest; do
#   node=$(echo $node | tr -d :)
#   row_id=0x$(echo $nova_id | cut -d- -f2)
#   deleted=$(ssh -n root@cloud1.gc3 mysql nova -e "'select id from instances where id=$row_id and deleted=1'")
#   [ -z "$deleted" ] && continue
#   echo ssh -n -l root $node virsh destroy $virsh_id "# $nova_id"
#   done
# )

import argparse
from collections import defaultdict
import re
import multiprocessing as mp
import subprocess
import sys
import logging
import os
import time
import shlex

from keystoneclient import session
from keystoneclient.auth.identity import v3

from novaclient import client as nova_client

log = logging.getLogger()
log.addHandler(logging.StreamHandler())

def memoize(f):
    memo = {}
    def helper(x):
        if f not in memo:
            memo[f] = f(x)
        return memo[f]
    return helper


@memoize
def make_session(opts):
    """Create a Keystone session"""
    auth = v3.Password(auth_url=opts.os_auth_url,
                       username=opts.os_username,
                       password=opts.os_password,
                       project_name=opts.os_project_name,
                       user_domain_id=opts.os_user_domain_id,
                       project_domain_id=opts.os_project_domain_id)
    sess = session.Session(auth=auth)
    return sess


class EnvDefault(argparse.Action):
    # This is took from
    # http://stackoverflow.com/questions/10551117/setting-options-from-environment-variables-when-using-argparse
    def __init__(self, envvar, required=True, default=None, **kwargs):
        if envvar in os.environ:
            default = os.environ[envvar]
        if required and default:
            required = False
        super(EnvDefault, self).__init__(default=default, required=required,
                                         **kwargs)

    def __call__(self, parser, namespace, values, option_string=None):
        setattr(namespace, self.dest, values)


def setup(argv=sys.argv[1:]):
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument('--os-username',
                        action=EnvDefault,
                        envvar="OS_USERNAME",
                        help='OpenStack administrator username. If not supplied, the value of the '
                        '"OS_USERNAME" environment variable is used.')
    parser.add_argument('--os-password',
                        action=EnvDefault,
                        envvar="OS_PASSWORD",
                        help='OpenStack administrator password. If not supplied, the value of the '
                        '"OS_PASSWORD" environment variable is used.')
    parser.add_argument('--os-project-name',
                        action=EnvDefault,
                        envvar="OS_PROJECT_NAME",
                        help='OpenStack administrator project name. If not supplied, the value of the '
                        '"OS_PROJECT_NAME" environment variable is used.')
    parser.add_argument('--os-auth-url',
                        action=EnvDefault,
                        envvar="OS_AUTH_URL",
                        help='OpenStack auth url endpoint. If not supplied, the value of the '
                        '"OS_AUTH_URL" environment variable is used.')
    parser.add_argument('--os-user-domain-id',
                        default='default')
    parser.add_argument('--os-project-domain-id',
                        default='default')

    parser.add_argument('-v', '--verbose', action='count', default=0,
                        help='Increase verbosity')
    parser.add_argument('-k', '--kill', help='Kill spurious virtual machines',
                        default=False, action="store_true")
    parser.add_argument('-p', '--process-pool-size',
                        help='Run this many SSH processes in parallel',
                        type=int, default=15)
    parser.add_argument('sshopts', nargs='*', help="ssh options.")
    opts = parser.parse_args(argv)

    # Set verbosity
    verbosity = max(0, 3-opts.verbose) * 10
    log.setLevel(verbosity)
    return opts


# this must be a function object, not a plain function since lambdas are not
# pickle-able in Python 2; see: https://stackoverflow.com/a/4827520/459543
class RunVirsh(object):
    def __init__(self, ssh_opts=[]):
        self.ssh = ['ssh'] + ssh_opts
        log.debug("RunVirsh: using SSH command `%s`", ' '.join(self.ssh))
    def __call__(self, host):
        log.info("Gathering VM list from host `%s` ...", host)
        cmd = self.ssh + [host, 'virsh', 'list', '--all']
        cmd_str = ' '.join(cmd)
        log.debug("RunVirsh: Executing command `%s` ...", cmd_str)
        pipe = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        stdout, stderr = pipe.communicate()
        rc = pipe.returncode
        log.debug("Command `%s` exited with status %d and output `%s`", cmd_str, rc, stdout)
        return (rc, host, stdout, stderr)


def parse_virsh_output(output):
    """
    Parses the output of virsh list.

    @returns a list of tuple (`id`, `name`) containing id and names of
    all the running instances.
    """
    vm_re = re.compile(' *(?P<id>[0-9-]+) +(?P<name>[^ ]+) +(?P<state>[running|idle|paused|shutdown|shut off|crashed|dying|pmsuspended]+)')
    instances = []
    for line in output.splitlines():
        match = vm_re.match(line)
        if match:
            name = match.group('name')
            hexid = int(name[name.rfind('-')+1:], 16)
            instances.append({'id':match.group('id'),
                              'name': name,
                              'state': match.group('state'),
                              'nova_id': hexid})
    return instances


def maybe_run_remote_command(cmd, host, sshopts, dry_run=True):
    if not isinstance(cmd, list):
        cmd = shlex.split(cmd)
    if not dry_run:
        print("WARNING YOU ARE KILLING EVERYTHING")
    if dry_run:
        log.info(str.join(' ', cmd))
        return 0
    else:
        log.info("Executing command `%s`" % cmd)
        pipe = subprocess.Popen(cmd, stdout=subprocess.PIPE,
                                stderr=subprocess.PIPE)
        stdout, stderr = pipe.communicate()
        retcodes.append(pipe.returncode)
        if pipe.returncode != 0:
            log.error("Error running command %s" % (cmd))
            log.info("Command return code: %d, stderr: %s" % (pipe.returncode, stderr))
        return pipe.returncode

def maybe_kill_instance(kill, host, sshopts, vmid):
    """
    SSh to `host` using ssh options `sshopts` and kill the VM with id
    `vmid` unless `dryrun` is `False`, otherwise print the ssh command
    to run to destroy the instance.
    """
    cmd = ['ssh'] + sshopts + [host, 'virsh', 'destroy', str(vmid)]
    dry_run = not kill
    return maybe_run_remote_command(cmd, host, sshopts, dry_run=dry_run)


def maybe_undefine_instance(kill, host, sshopts, vmid):
    """
    SSh to `host` using ssh options `sshopts` and kill the VM with id
    `vmid` unless `dryrun` is `False`, otherwise print the ssh command
    to run to destroy the instance.
    """
    cmd = ['ssh'] + sshopts + [host, 'virsh', 'undefine', str(vmid)]
    dry_run = not kill
    return maybe_run_remote_command(cmd, host, sshopts, dry_run=dry_run)


def main(opts):
    sess = make_session(opts)
    client = nova_client.Client('2', session=sess)

    # Get all instances
    vms = client.servers.list(search_opts={'all_tenants': 'True'})
    log.info("Found %d VMs", len(vms))
    vms_by_id = {getattr(i, 'OS-EXT-SRV-ATTR:instance_name'): i for i in vms}
    instances_by_host = defaultdict(list)
    for vm in vms:
        host = getattr(vm, 'OS-EXT-SRV-ATTR:hypervisor_hostname')
        instances_by_host[host].append(vm)

    # Get all compute nodes.
    compute_nodes = list(sorted(
        srv.host for srv in client.services.list()
        if srv.binary == 'nova-compute'
    ))

    log.debug("Spawning %d jobs: %s", len(compute_nodes), str.join(', ', compute_nodes))
    pool = mp.Pool(opts.process_pool_size)
    output_to_process = pool.map(RunVirsh(opts.sshopts), compute_nodes)
    log.info("All jobs ended (more or less)")

    vms_on_host = {}
    while output_to_process:
        (ret, host, stdout, stderr) = output_to_process.pop()

        if ret != 0:
            log.error("Error `%d` on host %s: %s" % (ret,
                                                 host,
                                                 stderr))
        else:
            vms_on_host[host] = parse_virsh_output(stdout)
            log.debug("host %s: %d instances" % (host, len(vms_on_host[host])))

    try:
        for host, vms in vms_on_host.items():
            shorthost = host[:host.find('.')]
            for vm in vms:
                vmid = vm['name']
                vmstate = vm['state']
                instbyhost = instances_by_host[host] + instances_by_host[shorthost]
                if vmid not in [getattr(i, 'OS-EXT-SRV-ATTR:instance_name') for i in instbyhost]:
                    nova_vm = vms_by_id.get(vmid)
                    if nova_vm:
                        # Maybe add a check if the instance is
                        # migrating. During live migration, you have
                        # two instances with the same name, one
                        # (active) on the source host, and the other
                        # (paused) on the destination host.
                        other_host = getattr(nova_vm, 'OS-EXT-SRV-ATTR:hypervisor_hostname')
                        log.error("Instance %s (%s) is in '%s' on hypervisor %s, but DB says it should run on %s instead",
                                  nova_vm.id, vmid, vmstate, host, other_host)
                        other_host_vms = {i['name']:i for i in vms_on_host[other_host]}
                        if vmid in other_host_vms and vmstate != 'pause':
                            log.error("  vm %s is in status %s on host %s, killing instance on  %s",
                                      vmid,other_host_vms[vmid]['state'], other_host, host)
                            if vmstate == "shut off":
                                maybe_undefine_instance(opts.kill, host, opts.sshopts, vmid)
                            else:
                                maybe_kill_instance(opts.kill, host, opts.sshopts, vmid)
                                maybe_undefine_instance(opts.kill, host, opts.sshopts, vmid)
                        else:
                            log.error("  vm %s not running on %s => please update DB", vmid, other_host)

                    else:
                        log.error("Instance name %s %s on %s but not found in database", vmid, vmstate, host)
                        if vmstate == "shut off":
                            maybe_undefine_instance(opts.kill, host, opts.sshopts, vm.get('name'))
                        else:
                            maybe_kill_instance(opts.kill, host, opts.sshopts, vm.get('name'))
                            maybe_undefine_instance(opts.kill, host, opts.sshopts, vm.get('name'))
    except Exception as ex:
        raise
        import pdb; pdb.set_trace()

if __name__ == "__main__":
    opts = setup()
    main(opts)
